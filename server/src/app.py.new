from flask import Flask, jsonify, request
from flask_cors import CORS
from flask_jwt_extended import JWTManager
from pymongo import MongoClient
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

app = Flask(__name__)

# Simple CORS configuration - allow all origins for now
app.config['CORS_HEADERS'] = 'Content-Type,Authorization'
CORS(app, supports_credentials=True)

# Configure JWT
app.config['JWT_SECRET_KEY'] = os.getenv('JWT_SECRET_KEY', 'your_super_secret_key_for_jwt_tokens')
jwt = JWTManager(app)

# Configure MongoDB
mongodb_uri = os.getenv('MONGODB_URI', 'mongodb+srv://dsilva:7DaXRzRoueTBa3a5@alumnimanagement.f10hpn9.mongodb.net/?retryWrites=true&w=majority&appName=AlumniManagement')
database_name = os.getenv('DATABASE_NAME', 'alumni_management')
client = MongoClient(mongodb_uri)
db = client[database_name]
app.config['DATABASE'] = db

# Import routes
from .routes.admin_routes import admin_bp
from .routes.analytics_routes import analytics_bp
from .routes.prediction_routes import prediction_bp

# Register blueprints
app.register_blueprint(admin_bp, url_prefix='/api')
app.register_blueprint(analytics_bp, url_prefix='/api')
app.register_blueprint(prediction_bp, url_prefix='/api')

# API home route
@app.route('/api')
def api_home():
    return jsonify({'message': 'Alumni Management System API'})

# Health check endpoint
@app.route('/api/health')
def health_check():
    return jsonify({'status': 'healthy'})

# CORS test endpoint
@app.route('/api/cors-test')
def cors_test():
    return jsonify({
        'message': 'CORS is working correctly',
        'origin': request.headers.get('Origin', 'Unknown')
    })

# Root route for testing
@app.route('/')
def root():
    return jsonify({
        'message': 'Alumni Management System API is running',
        'status': 'online',
        'frontend_url': 'https://alumni-client-three.vercel.app'
    })

# Error handlers
@app.errorhandler(404)
def not_found(error):
    return jsonify({'message': 'API resource not found'}), 404

@app.errorhandler(500)
def server_error(error):
    return jsonify({'message': 'Internal server error'}), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
