# Use a single-stage build for simplicity
FROM python:3.9-slim

# Set working directory
WORKDIR /app

# Install Node.js
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    && curl -sL https://deb.nodesource.com/setup_16.x | bash - \
    && apt-get install -y nodejs \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy Python requirements and install dependencies
COPY ./server/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy server code
COPY ./server .

# Create client directory
RUN mkdir -p /app/client

# Copy client code
COPY ./client /app/client

# Build the React app
WORKDIR /app/client
RUN npm install && npm run build

# Return to app directory
WORKDIR /app

# Create .env file with environment variables
RUN echo "MONGODB_URI=mongodb+srv://dsilva:7DaXRzRoueTBa3a5@alumnimanagement.f10hpn9.mongodb.net/?retryWrites=true&w=majority&appName=AlumniManagement\n\
DATABASE_NAME=alumni_management\n\
JWT_SECRET_KEY=your_super_secret_key_for_jwt_tokens\n\
" > /app/.env

# Create a simple app.py file
RUN echo 'import os\n\
import sys\n\
from flask import Flask, send_from_directory, jsonify, request\n\
\n\
# Create Flask app\n\
app = Flask(__name__, static_folder="client/build")\n\
\n\
# Configure app\n\
from flask_cors import CORS\n\
CORS(app)\n\
\n\
# API home route\n\
@app.route("/api")\n\
def api_home():\n\
    return jsonify({"message": "Alumni Management System API"})\n\
\n\
# Health check endpoint\n\
@app.route("/api/health")\n\
def health_check():\n\
    return jsonify({"status": "healthy"})\n\
\n\
# Serve React app\n\
@app.route("/", defaults={"path": ""})\n\
@app.route("/<path:path>")\n\
def serve(path):\n\
    if path.startswith("api/"):\n\
        # Let API routes handle this\n\
        pass\n\
    elif path and os.path.exists(os.path.join(app.static_folder, path)):\n\
        return send_from_directory(app.static_folder, path)\n\
    else:\n\
        # Serve index.html for client-side routing\n\
        return send_from_directory(app.static_folder, "index.html")\n\
\n\
if __name__ == "__main__":\n\
    port = int(os.environ.get("PORT", 5000))\n\
    app.run(host="0.0.0.0", port=port)\n\
' > /app/app.py

# Expose port
EXPOSE 5000

# Run the application
CMD ["python", "app.py"]
